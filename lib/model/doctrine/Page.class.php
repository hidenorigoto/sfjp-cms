<?php

/**
 * Page
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package sfjp
 * @subpackage model
 * @author hidenorigoto
 * @depends UrlHelper.php
 * @version SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Page extends BasePage {
    protected $indexJsonDecoded = null;
    protected $repository_base_url_http = null;

    /**
     * Page::render()
     * コンテンツ（描画済み）を出力する
     *
     * @return string
     */
    public function render()
    {
        return $this->adjustRelativeImagePath($this->getContentRendered());
    }

    /**
     * Page::getCommitters()
     * このページのコミッター一覧を取得する。（コミット日付の昇順）
     * コミッターのメールアドレスが連想配列のキーになる
     *
     * @return Doctrine_Collection
     */
    public function getCommitters()
    {
        CommitTable::getInstance()->setAttribute(Doctrine_Core::ATTR_COLL_KEY, 'committer_email');
        $committers = Doctrine_Query::create()
                    ->from('Commit c')
                    ->where('c.page_id = ?', $this->getId())
                    ->orderBy('c.committed_at asc')
                    ->execute();

        CommitTable::getInstance()->setAttribute(Doctrine_Core::ATTR_COLL_KEY, 'id');

        return $committers;
    }

    /**
     * Page::getCommits()
     * このページのコミット一覧を取得する。（コミット日付の昇順）
     *
     * @return  Doctrine_Collection
     */
    public function getCommits()
    {
        $commits = Doctrine_Query::create()
                 ->from('Commit c')
                 ->where('c.page_id = ?', $this->getId())
                 ->orderBy('c.committed_at asc')
                 ->execute();

        return $commits;
    }

    /**
     * Page::getIndexJsonDecoded()
     * index_jsonカラムのデータをデコードして取得する
     *
     * @return  string
     */
    public function getIndexJsonDecoded()
    {
        if (!$this->indexJsonDecoded) {
            $this->indexJsonDecoded = json_decode($this->getIndexJson());
        }

        return $this->indexJsonDecoded;
    }

    /**
     * Page::adjustRelativeImagePath()
     * srcが相対パスになっているimgタグを探して変換する
     *
     * @param  string $data
     * @return string
     */
    public function adjustRelativeImagePath($data)
    {
        $public_directory = $this->getRepository()->getPublicDirectory(false)
                          . '/';
        $callback         = function($matches) use ($public_directory)
        {
            //  先頭がhttp://なら無視
            if (preg_match('/^https?:\/\//i', $matches[1])) {
                return $matches[0];
            }
            $path = $public_directory . $matches[1];
            return str_replace($matches[1], $path, $matches[0]);
        };
        $data = preg_replace_callback(
                    '/<img[^>]+?src="([^\/"][^"]+?)"/i',
                    $callback,
                    $data);
        return $data;
    }

    /**
     * getGithubRepositoryUrl()
     * このページに対応するリポジトリのgithub URLを取得する。
     * 取得結果はオブジェクト内にキャッシュされる。
     *
     * @return  string
     *
     * @see     Repository::getRepositoryHttp()
     */
    public function getGithubRepositoryUrl()
    {
        if (!$this->repository_base_url_http) {
            $this->repository_base_url_http = $this->getRepository()->getRepositoryHttp();
        }
        return $this->repository_base_url_http;
    }

    /**
     * getGithubUrl()
     *
     * @return
     */
    public function getGithubUrl()
    {
        $repository_url = $this->getGithubRepositoryUrl()
                        . '/blob/master';

        $page_path      = $this->getPath()
                        . '.'
                        . $this->getContentType();
        $page_path      = str_replace($this->getRepository()->getBindPath(), '', $page_path);

        return $repository_url . $page_path;;
    }

    /**
     * getGithubHistoryUrl()
     *
     * @return
     */
    public function getGithubHistoryUrl()
    {
        $repository_url = $this->getGithubRepositoryUrl()
                        . '/commits/master';

        $page_path      = $this->getPath()
                        . '.'
                        . $this->getContentType();
        $page_path      = str_replace($this->getRepository()->getBindPath(), '', $page_path);

        return $repository_url . $page_path;;
    }

    /**
     * getFormattedFirstCommitted()
     *
     * @return DateTime nullや0の場合はブランクを返す
     */
    public function  getFormattedFirstCommitted()
    {
        if (is_null($this->getFirstCommitted())) {
            return '';
        }
        try {
            $date = $this->getDatetimeObject('first_committed');
        } catch (Exception $e) {
            return '';
        }

        if ($date->getTimestamp() > 0) {
            return $date->format('Y/m/d');
        } else {
            return '';
        }
    }

    /**
     * updateLastUpdated()
     *
     * @return
     */
    public function updateLastUpdated()
    {
        $commit = CommitTable::getLatestCommit($this->getId());
        $this->setLastUpdated($commit->getCommittedAt());
        $this->setLastUpdatedYm((int)$commit->getDateTimeObject('committed_at')->format('Ym'));
        $this->save();
    }

    /**
     * updateFirstCommitted()
     *
     * @return
     */
    public function updateFirstCommitted()
    {
        $commit = CommitTable::getFirstCommit($this->getId());
        $this->setFirstCommitted($commit->getCommittedAt());
        $this->setFirstCommittedYm((int)$commit->getDateTimeObject('committed_at')->format('Ym'));
        $this->save();
    }
}